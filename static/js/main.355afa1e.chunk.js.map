{"version":3,"sources":["components/Notification/Notification.module.css","components/SearchBar/SearchBar.js","APIservice/APIservice.js","components/Notification/Notification.js","components/Modal/Modal.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGalleryList/ImageGalleryList.js","components/Button/Button.js","components/ImageGallery/ImageGallery.js","App.jsx","index.js","components/Button/Button.module.css"],"names":["module","exports","SearchBar","onSubmit","useState","searchQuery","setSearchQuery","className","event","preventDefault","trim","toast","warn","type","autoComplete","autoFocus","placeholder","value","onChange","target","staticURL","perPage","keyAPI","Notification","text","s","info","Modal","src","alt","onClose","useEffect","keydownCloseModal","code","window","addEventListener","removeEventListener","createPortal","onClick","currentTarget","document","querySelector","ImageGalleryItem","fullSize","showModal","setShowModal","toggleModal","ImageGalleryList","imgArray","map","id","webformatURL","largeImageURL","tags","Button","onClickFetch","button","size","iconSpin","iconSpinBtn","IDLE","PENDING","REJECTED","RESOLVED","ImageGallery","status","setStatus","imgFetched","setImgFetched","imgTotal","setImgTotal","page","setPage","error","setError","resetGallery","oldQuery","useRef","current","setTimeout","query","url","fetch","then","response","ok","json","Promise","reject","Error","imageAPI","hits","totalHits","length","prevState","catch","scrollTo","top","documentElement","scrollHeight","behavior","buttonType","message","prev","App","autoClose","root","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.355afa1e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"Notification_info__3hJal\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\n\nfunction SearchBar ({onSubmit}) {\n\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleInputChange = ({ target }) => setSearchQuery(target.value);\n\n  const reset = () => setSearchQuery('');\n\n  const onSubmitForm = (event) => {\n    event.preventDefault();\n    searchQuery.trim() !== '' ? onSubmit(searchQuery) : toast.warn('Input search Query');\n    reset();\n  }\n\n    return (\n        <header className=\"Searchbar\">\n          <form className=\"SearchForm\" onSubmit={onSubmitForm}>\n            <button type=\"submit\" className=\"SearchForm-button\">\n              <span className=\"SearchForm-button-label\">Search</span>\n            </button>\n            <input\n              className=\"SearchForm-input\"\n              type=\"text\"\n              autoComplete=\"off\"\n              autoFocus\n              placeholder=\"Search images and photos\"\n              value={searchQuery}\n              onChange={handleInputChange}\n            />\n          </form>\n        </header>\n    )\n}\n\nSearchBar.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n  }\n\nexport default SearchBar;","const staticFetchOptions = {\n  perPage: 12,\n  staticURL: 'https://pixabay.com/api/?image_type=photo&orientation=horizontal',\n  keyAPI: '19532775-cd1fec64673db4c80a00103d2',\n};\n\nconst { staticURL, perPage, keyAPI } = staticFetchOptions;\n\nexport function imageAPI(query, page) {\n  const url = `${staticURL}&q=${query}&page=${page}&per_page=${perPage}&key=${keyAPI}`;\n  return fetch(url).then(response => {\n    return response.ok\n      ? response.json()\n      : Promise.reject(new Error(`There is no image with tag ${query}`));\n  });\n}\n","import React from 'react';\nimport s from './Notification.module.css'\n\nexport default function Notification({text}) {\n    return <h1 className={s.info}>{text}</h1>\n}","import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { createPortal } from 'react-dom';\n\nfunction Modal({ src, alt, onClose }) {\n\n    useEffect(() => {\n        const keydownCloseModal = ({ code }) => {\n            code === \"Escape\" && onClose();\n        }\n        window.addEventListener('keydown', keydownCloseModal);\n        return ()=>window.removeEventListener('keydown', keydownCloseModal);\n    },[onClose])\n\n    const backdropCloseModal = ({ target, currentTarget }) => {\n        // target === currentTarget && onClose();\n        onClose();\n    }\n\n        return createPortal(\n            <div className=\"Overlay\" onClick={backdropCloseModal}>\n              <div className=\"Modal\">\n                <img src={src} alt={alt} />\n              </div>\n            </div>\n        , document.querySelector('#modal-root'))\n}\n\nModal.propTypes = {\n        onClose: PropTypes.func.isRequired,\n    }\n\nexport default Modal;","import {useState} from 'react';\nimport Modal from '../Modal'\n\nfunction ImageGalleryItem({ src, alt, fullSize }) {\n  const [showModal, setShowModal] = useState(false);\n\n  const toggleModal = () => setShowModal(!showModal);\n\n  return (\n      <>\n      <img src={src} alt={alt} onClick={toggleModal} className=\"ImageGalleryItem-image\" />\n      {showModal && ( <Modal onClose={toggleModal} src={fullSize} alt={alt} /> )}\n      </>\n  )\n}\n\nexport default ImageGalleryItem;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImageGalleryItem from '../ImageGalleryItem'\n\nfunction ImageGalleryList ({imgArray}) {\n    return (\n        <ul className=\"ImageGallery\">\n            {imgArray.map(({ id, webformatURL, largeImageURL, tags }) => {\n                return (\n                    <li className=\"ImageGalleryItem\" key={id+webformatURL}>\n                        <ImageGalleryItem src={webformatURL} alt={tags} fullSize={largeImageURL} />\n                    </li>\n                )\n            })}\n        </ul>\n    )\n}\n\nImageGalleryList.propTypes = {\n    imgArray: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        webformatURL: PropTypes.string.isRequired,\n        largeImageURL: PropTypes.string.isRequired,\n        tags: PropTypes.string.isRequired,\n    }))\n}\n\nexport default ImageGalleryList;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ImSpinner6 } from 'react-icons/im';\nimport s from './Button.module.css';\n\nfunction Button({ onClickFetch = null, type = 'more'}) {\n    if (type === 'hidden') {return <></>}\n    if (type === 'more') {\n        return <button className={s.button} type=\"button\" onClick={onClickFetch}>Load More</button>;\n    }\n    if (type === 'spinner') {\n        return <ImSpinner6 size=\"36\" className={s.iconSpin} />;\n    }\n    if (type === 'loading') {\n        return (\n            <button className={s.button} type=\"button\">\n                <span>\n                    <ImSpinner6 size=\"16\" className={s.iconSpinBtn} />\n                </span>\n                <span>Loading...</span>\n            </button>)\n    }\n}\n\nButton.propTypes = {\n    onClickFetch: PropTypes.func,\n    type: PropTypes.string,\n}\n\nexport default Button;","import { useState, useEffect, useRef } from 'react';\nimport { imageAPI } from '../../APIservice';\nimport Notification from '../Notification';\nimport ImageGalleryList from '../ImageGalleryList';\nimport Button from '../Button';\nimport PropTypes from 'prop-types';\n\nconst { IDLE, PENDING, REJECTED, RESOLVED } = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  REJECTED: 'rejected',\n  RESOLVED: 'resolved',\n};\n\nfunction ImageGallery({ searchQuery }) {\n  const [status, setStatus] = useState(IDLE);\n  const [imgFetched, setImgFetched] = useState([]);\n  const [imgTotal, setImgTotal] = useState(0);\n  const [page, setPage] = useState(1);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    resetGallery();\n  }, [searchQuery]);\n\n  const oldQuery = useRef('');\n\n  useEffect(() => {\n    if (!searchQuery.trim()) {\n      return;\n    }\n    if (page !== 1 && oldQuery.current !== searchQuery) {\n      return;\n    }\n\n    oldQuery.current = searchQuery;\n    setStatus(PENDING);\n    setTimeout(() => {\n      imageAPI(searchQuery, page)\n        .then(({ hits, totalHits }) => {\n          if (hits.length === 0) {\n            return Promise.reject(\n              new Error(`There is no image with tag: ${searchQuery}`),\n            );\n          }\n          setImgFetched(prevState => [...prevState, ...hits]);\n          setImgTotal(totalHits);\n          setStatus(RESOLVED);\n        })\n        .catch(error => {\n          setError(error);\n          setStatus(REJECTED);\n        });\n    }, 500);\n  }, [page, searchQuery]);\n\n  useEffect(() => {\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n      behavior: 'smooth',\n    });\n  }, [imgFetched, status]);\n\n  const resetGallery = () => {\n    setStatus(IDLE);\n    setImgFetched([]);\n    setImgTotal(0);\n    setPage(1);\n    setError('');\n  };\n\n  const incrementPage = () => setPage(prev => prev + 1);\n\n  const buttonLoadType = () => {\n    if (status === PENDING && page === 1) {\n      return 'spinner';\n    }\n    if (status === PENDING && page > 1) {\n      return 'loading';\n    }\n    if (imgFetched.length >= imgTotal) {\n      return 'hidden';\n    }\n    return 'more';\n  };\n  const buttonType = buttonLoadType();\n\n  if (status === IDLE) {\n    return <Notification text=\"Input tag to find images\" />;\n  }\n  if (status === PENDING) {\n    return (\n      <>\n        <ImageGalleryList imgArray={imgFetched} />\n        <Button type={buttonType} />\n      </>\n    );\n  }\n  if (status === REJECTED) {\n    return <Notification text={error.message} />;\n  }\n  if (status === RESOLVED) {\n    return (\n      <>\n        <ImageGalleryList imgArray={imgFetched} />\n        <Button type={buttonType} onClickFetch={incrementPage} />\n      </>\n    );\n  }\n}\n\nImageGallery.propTypes = {\n  searchQuery: PropTypes.string.isRequired,\n};\n\nexport default ImageGallery;\n","import { useState } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport SearchBar from './components/SearchBar';\nimport ImageGallery from './components/ImageGallery';\n\nfunction App() {\n  const [searchQuery, setSearchQuery] = useState('');\n  return (<>\n    <SearchBar onSubmit={setSearchQuery} />\n    <ImageGallery searchQuery={searchQuery} />\n    <ToastContainer autoClose={3000}/>\n    </>)\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nconst root = document.querySelector('#root');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  root,\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3QF_k\",\"iconSpin\":\"Button_iconSpin__3vRRA\",\"icon-spin\":\"Button_icon-spin__18vUR\",\"iconSpinBtn\":\"Button_iconSpinBtn__3d432\"};"],"sourceRoot":""}